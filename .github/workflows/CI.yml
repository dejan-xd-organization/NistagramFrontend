# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, developer ]
  pull_request:
    branches: [ master, developer ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Angular:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node
      uses: actions/setup-node@v1 #this will install Node and npm on Ubuntu
      with:
        node-version: '12.x'
    - name: Checkout code
      uses: actions/checkout@v2
    - name: npm install
      run: npm install
    - name: npm install cli
      run: npm install -g @angular/cli > /dev/null
    - name: ng build
      run: ng build --prod --output-path=dist
    - name: npm test
      run: npm run test
    - name: Build NistagramFrontend artifact
      working-directory: .
      run: |
        npm ci
        CI=false npm run build --if-present
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.5
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        append_to_pre_release_tag: ""
        default_bump: major
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        release_name: Release ${{ steps.tag_version.outputs.new_tag }}
        prerelease: false
    - name: Archive build
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: deploy_dist
        path: dist
    - name: Create directory results/artifacts 
      run: 'mkdir --parents results/artifacts'
    - name: Create ci-env.txt in path directory
      run: 'env | grep GITHUB_ | sort > results/artifacts/ci-env.txt'
    - uses: actions/upload-artifact@v2
      with:
          name: artifacts_from_ubuntu
          path: results/artifacts/
  
  Deploy:
    runs-on: ubuntu-latest
    needs: Angular
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: deploy_dist
          
  SonarCloud:
    runs-on: ubuntu-latest
    steps:
    
      - name: Check Out Repo SonarCloud
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          
          
    
      - uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
    
    
    

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
